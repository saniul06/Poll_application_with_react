{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","mypoll/sidebar/list.jsx","mypoll/form/index.jsx","mypoll/sidebar/index.jsx","mypoll/main/opinionform.jsx","mypoll/main/index.jsx","data/data.jsx","mypoll/index.jsx","index.js"],"names":["App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","PollList","ListGroup","className","style","background","Button","onClick","this","props","toggleModal","Input","value","searchTerm","placeholder","onChange","event","handleSearch","target","polls","map","poll","ListGroupItem","selectPoll","id","cursor","title","Component","form","state","description","options","errors","handleChange","e","setState","name","addOption","length","alert","option","shortid","generate","vote","concat","deleteOption","index","splice","handleOptionChange","validate","optionErrors","forEach","isValid","Object","keys","submitPoll","preventDefault","console","log","isUpdate","submit","totalVote","opinions","created","Date","reset","defaultOptions","Form","onSubmit","FormGroup","Label","invalid","FormFeedback","color","type","buttonValue","Sidebar","openForm","filter","toLowerCase","includes","Modal","isOpen","toggle","ModalHeader","ModalBody","addNewPoll","OpinionForm","selectedOption","bg","pollId","submitOpinion","opinion","getOpinion","isChecked","getSingleOpinion","showOpinion","getAllOpinios","selectedPoll","padding","borderRadius","deletePoll","CustomInput","toFixed","ButtonGroup","Main","fontWeight","updatePoll","data","pools","MyPoll","all","find","opt","push","optionId","updatedPoll","Container","Row","Col","md","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.699c1b92.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Component } from 'react';\nimport { ListGroup, ListGroupItem, Input, Button } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nclass PollList extends Component {\n    render() {\n        return (\n            <ListGroup className='p-2' style={{ background: '#ddd' }}>\n                <Button className='my-2 d-block bg-primary' onClick={this.props.toggleModal}>Create new poll</Button>\n                <Input\n                    className='my-2'\n                    value={this.props.searchTerm}\n                    placeholder='search poll ...'\n                    onChange={(event) => this.props.handleSearch(event.target.value)}\n                />\n                <h3 className='my-3'>List of polls</h3>\n                {this.props.polls.map((poll) => (\n                    <ListGroupItem\n                        className='p-3'\n                        key={poll.id}\n                        onClick={() => this.props.selectPoll(poll.id)}\n                        style={{ cursor: 'pointer' }}\n                    >\n                        {poll.title}\n                    </ListGroupItem>\n                ))}\n            </ListGroup>\n        );\n    }\n}\n\nPollList.propTypes = {\n    polls: PropTypes.array.isRequired,\n    selectPoll: PropTypes.func.isRequired\n};\n\nexport default PollList;\n","import { Component } from 'react';\nimport {\n    Form,\n    FormGroup,\n    Input,\n    Label,\n    Button,\n    FormFeedback\n} from 'reactstrap';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\n\nclass form extends Component {\n    state = {\n        title: '',\n        description: '',\n        options: [],\n        errors: {}\n    };\n\n    componentDidMount() {\n        const defaultOptions = [\n            { id: shortid.generate(), value: '', vote: 0 },\n            { id: shortid.generate(), value: '', vote: 0 }\n        ];\n        this.setState({\n            options: defaultOptions\n        })\n        console.log('title in form :', this.state.title)\n        if (this.props.poll && Object.keys(this.props.poll).length > 0) {\n            const { title, description, options } = this.props.poll;\n            \n            this.setState({\n                title,\n                description,\n                options\n            });\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    addOption = () => {\n        const options = this.state.options;\n        if (options.length === 5) {\n            return alert('you can have add max 5 options');\n        }\n        const option = {};\n        option.id = shortid.generate();\n        option.value = '';\n        option.vote = 0;\n        this.setState({\n            options: this.state.options.concat(option)\n        });\n    };\n\n    deleteOption = (index) => {\n        let options = this.state.options;\n        if (options.length == 2) {\n            return alert('Atleaset 2 options required');\n        }\n        options.splice(index, 1);\n        this.setState({\n            options\n        });\n    };\n\n    handleOptionChange = (e, index) => {\n        const options = this.state.options;\n        options[index].value = e.target.value;\n        this.setState({\n            options\n        });\n    };\n\n    validate = (e) => {\n        const errors = {};\n        const { title, description, options } = this.state;\n        if (!title) {\n            errors.title = 'Title is required';\n        }\n        if (!description) {\n            errors.description = 'Description is required';\n        }\n\n        const optionErrors = [];\n\n        options.forEach((option, index) => {\n            if (!option.value) {\n                optionErrors[index] = 'Field is required';\n            }\n        });\n\n        if (optionErrors.length > 0) {\n            errors.options = optionErrors;\n        }\n        return {\n            isValid: Object.keys(errors).length === 0,\n            errors\n        };\n    };\n\n    submitPoll = (e) => {\n        e.preventDefault();\n        console.log('this.state.title: :', this.state.title)\n        const { isValid, errors } = this.validate();\n        if (isValid) {\n            if (this.props.isUpdate) {\n                this.props.poll.title = this.state.title;\n                this.props.poll.description = this.state.description;\n                this.props.poll.options = this.state.options;\n                this.props.submit(this.props.poll);\n                console.log('submitted');\n                this.props.toggleModal()\n                alert('Poll updated successfully');\n                \n            } else {\n                this.props.submit({\n                    id: shortid.generate(),\n                    title: this.state.title,\n                    description: this.state.description,\n                    options: this.state.options,\n                    totalVote: 0,\n                    opinions: [],\n                    created: new Date()\n                });\n                this.setState({\n                    title: '',\n                    description: '',\n                    options: [],\n                    errors: {}\n                });\n                e.target.reset();\n                console.log('submitted');\n                this.props.toggleModal()\n                alert('Poll added successfully');\n            }\n        } else {\n            this.setState({ errors });\n        }\n    };\n\n    render() {\n        return (\n            <Form onSubmit={this.submitPoll}>\n                <FormGroup>\n                    <Label id='title'>Title</Label>\n                    <Input\n                        id='title'\n                        onChange={this.handleChange}\n                        name='title'\n                        value={this.state.title}\n                        invalid={this.state.errors.title ? true : false}\n                    />\n                    <FormFeedback>{this.state.errors.title}</FormFeedback>\n                </FormGroup>\n                <FormGroup>\n                    <Label id='description'>Description</Label>\n                    <Input\n                        id='description'\n                        onChange={this.handleChange}\n                        name='description'\n                        value={this.state.description}\n                        invalid={this.state.errors.description ? true : false}\n                    />\n                    <FormFeedback>{this.state.errors.description}</FormFeedback>\n                </FormGroup>\n                <Button onClick={this.addOption}>Add Option</Button>\n                <FormGroup>\n                    {this.state.options.map((option, index) => (\n                        <div className='d-flex my-1' key={option.id}>\n                            <Input\n                             \n                                placeholder='add option here'\n                                value={this.state.options[index].value}\n                                onChange={(e) =>\n                                    this.handleOptionChange(e, index)\n                                }\n                                invalid={\n                                    this.state.errors.options &&\n                                        this.state.errors.options[index]\n                                        ? true\n                                        : false\n                                }\n                            />\n                            <Button\n                                color='danger'\n                                type='button'\n                                onClick={() => this.deleteOption(index)}\n                            >\n                                Delete\n                            </Button>\n                        </div>\n                    ))}\n                </FormGroup>\n                <Button>{this.props.buttonValue}</Button>\n            </Form>\n        );\n    }\n}\n\nform.propTypes = {\n    submit: PropTypes.func.isRequired\n};\n\nexport default form;\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input, Button, Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport PollList from './list';\nimport Form from '../form';\n\nclass Sidebar extends Component {\n    state = {\n        searchTerm: ''\n    };\n\n    handleSearch = (searchTerm) => {\n        this.setState({\n            searchTerm,\n            openForm: false\n        });\n    };\n\n    toggleModal = () => {\n        this.setState({\n            openForm: !this.state.openForm\n        });\n    };\n\n    render() {\n        const polls = this.props.polls.filter((poll) =>\n            poll.title\n                .toLowerCase()\n                .includes(this.state.searchTerm.toLowerCase())\n        );\n        return (\n            <div>\n                <PollList polls={polls} selectPoll={this.props.selectPoll} searchTerm={this.state.searchTerm} handleSearch={this.handleSearch} toggleModal={this.toggleModal} />\n\n                <Modal isOpen={this.state.openForm} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>\n                        Add new poll\n                    </ModalHeader>\n                    <ModalBody>\n                        <Form submit={this.props.addNewPoll} buttonValue='Add poll' toggleModal={this.toggleModal} />\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nSidebar.propTypes = {\n    polls: PropTypes.array.isRequired,\n    selectPoll: PropTypes.func.isRequired\n};\n\nexport default Sidebar;\n","import { Component, useState } from 'react';\nimport {\n    Form,\n    FormGroup,\n    Label,\n    CustomInput,\n    Input,\n    FormFeedback,\n    ListGroup,\n    ListGroupItem,\n    Button,\n    ButtonGroup\n} from 'reactstrap';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\n\nclass OpinionForm extends Component {\n    state = {\n        name: '',\n        selectedOption: '',\n        errors: '',\n        opinions: [],\n        bg: 'all',\n        pollId: ''\n    };\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    componentDidMount() {\n        this.setState({ errors: '' });\n    }\n\n    componentWillReceiveProps(props){\n        this.setState({pollId: props.poll.id})\n        if(props.selectedPoll.id !== this.state.pollId){\n            this.setState({\n                bg: 'all'\n            })\n        }\n        console.log(props.selectedPoll)\n    }\n\n    validate = () => {\n        const errors = {};\n        if (!this.state.name) {\n            errors.name = 'Please Provide your name';\n        }\n        if (!this.state.selectedOption) {\n            errors.selectedOption = 'Please select one item';\n        }\n\n        return {\n            isValid: Object.keys(errors).length === 0,\n            errors\n        };\n    };\n\n    submitOpinion = (e) => {\n        e.preventDefault();\n        const { isValid, errors } = this.validate();\n        if (isValid) {\n            const opinion = {};\n            opinion.id = shortid.generate();\n            opinion.pollId = this.props.poll.id;\n            opinion.name = this.state.name;\n            opinion.selectedOption = this.state.selectedOption;\n            this.props.getOpinion(opinion);\n            this.setState({\n                name: '',\n                selectedOption: '',\n                errors: '',\n                bg: 'all'\n            });\n        } else {\n            this.setState({\n                errors,\n                name: '',\n                selectedOption: '',\n                isChecked: false\n            });\n        }\n    };\n\n    getSingleOpinion = (id) => {\n        this.setState({\n            bg: id\n        });\n        this.props.showOpinion(this.props.poll.id, id);\n    };\n\n    getAllOpinios = () => {\n        this.setState({\n            bg: 'all'\n        });\n        this.props.showOpinion(this.props.poll);\n    };\n\n    render() {\n        return (\n            <div>\n                <Form\n                    onSubmit={this.submitOpinion}\n                    style={{ padding: '10px', borderRadius: '10px' }}\n                >\n                    <div className='d-flex mb-2'>\n                        <h5>Options</h5>\n                        <Button\n                            onClick={this.props.toggleModal}\n                            className='ml-auto'\n                            color='warning'\n                        >\n                            Edit poll\n                        </Button>\n                        <Button\n                            onClick={() =>\n                                this.props.deletePoll(\n                                    this.props.selectedPoll.id\n                                )\n                            }\n                            color='danger'\n                        >\n                            Delete poll\n                        </Button>\n                    </div>\n\n                    {this.props.poll.options.map((option) => (\n                        <FormGroup key={option.id}>\n                            <Label\n                                className='d-flex'\n                                style={{\n                                    padding: '5px',\n                                    background: '#fff',\n                                    borderRadius: '10px'\n                                }}\n                            >\n                                <CustomInput\n                                    id={option.id}\n                                    type='radio'\n                                    name='selectedOption'\n                                    value={option.id}\n                                    onClick={this.handleChange}\n                                    invalid={\n                                        this.state.errors.selectedOption\n                                            ? true\n                                            : false\n                                    }\n                                />\n                                {option.value}\n                                <span\n                                    style={{\n                                        padding: '5px 20px',\n                                        background: 'green',\n                                        color: 'white',\n                                        borderRadius: '5px'\n                                    }}\n                                    className='ml-auto'\n                                >\n                                    {option.vote}\n                                </span>\n                                <span\n                                    style={{\n                                        padding: '5px 20px',\n                                        background: 'orange',\n                                        color: 'black',\n                                        borderRadius: '5px'\n                                    }}\n                                >\n                                    {this.props.poll.totalVote\n                                        ? (\n                                              (option.vote * 100) /\n                                              this.props.poll.totalVote\n                                          ).toFixed(2)\n                                        : 0}{' '}\n                                    %\n                                </span>\n                            </Label>\n                        </FormGroup>\n                    ))}\n                    <FormGroup>\n                        <Label>Enter your Name</Label>\n                        <Input\n                            name='name'\n                            value={this.state.name}\n                            onChange={this.handleChange}\n                            placeholder='enter your name'\n                            invalid={this.state.errors.name ? true : false}\n                        />\n                        {this.state.errors.name && (\n                            <FormFeedback>\n                                {this.state.errors.name}\n                            </FormFeedback>\n                        )}\n                    </FormGroup>\n                    <button className='btn btn-info'>Submit</button>\n                </Form>\n                <div>\n                    <h3 className='my-2'>See who votes for each opinion</h3>\n                    {/* <UncontrolledButtonDropdown>\n                        <DropdownToggle caret>Select option</DropdownToggle>\n                        <DropdownMenu>\n                            <DropdownItem header>Header</DropdownItem>\n                            <DropdownItem\n                                    key={this.props.poll.id}\n                                    onClick={() =>\n                                        this.props.showOpinion(\n                                            this.props.poll\n                                        )\n                                    }\n                                >\n                                    All\n                                </DropdownItem>\n                            {this.props.poll.options.map((option) => (\n                                <DropdownItem\n                                    key={option.id}\n                                    onClick={(e) =>\n                                        this.props.showOpinion(e,\n                                            this.props.poll.id,\n                                            option.id\n                                        )\n                                    }\n                                >\n                                    {option.value}\n                                </DropdownItem>\n                            ))}\n                        </DropdownMenu>\n                    </UncontrolledButtonDropdown> */}\n                    <ButtonGroup>\n                        <Button\n                            key={this.props.poll.id}\n                            onClick={this.getAllOpinios}\n                            className={\n                                this.state.bg === 'all' ? 'bg-success' : ''\n                            }\n                        >\n                            All\n                        </Button>\n                        {this.props.poll.options.map((option) => (\n                            <Button\n                                key={option.id}\n                                // className={this.props.opinion.length > 0 && this.props.opinion[0].selectedOption === option.id ? 'bg-success' : ''}\n                                className={\n                                    this.state.bg === option.id\n                                        ? 'bg-success'\n                                        : ''\n                                }\n                                onClick={() => this.getSingleOpinion(option.id)}\n                            >\n                                {option.value}\n                            </Button>\n                        ))}\n                    </ButtonGroup>\n                    <p className='mt-3'>Name of the voters</p>\n                    <ListGroup>\n                        {this.props.opinion && this.props.opinion.length > 0\n                            ? this.props.opinion.map((opinion) => (\n                                  <ListGroupItem key={opinion.id}>\n                                      {opinion.name}\n                                  </ListGroupItem>\n                              ))\n                            : 'There is no vote'}\n                    </ListGroup>\n                </div>\n            </div>\n        );\n    }\n}\n\nOpinionForm.propTypes = {\n    poll: PropTypes.object.isRequired,\n    getOpinion: PropTypes.func.isRequired\n};\n\nexport default OpinionForm;\n","import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport OpinionForm from \"./opinionform\";\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap'\nimport Form from '../form'\n\nclass Main extends Component {\n    state = {\n        openForm: false\n    }\n\n    toggleModal = () => {\n        this.setState({ openForm: !this.state.openForm })\n    }\n    render() {\n        if (Object.keys(this.props.selectedPoll).length > 0) {\n            const poll = this.props.selectedPoll;\n            return (\n                <div>\n                    <p><span style={{fontWeight: 'bold'}}>Poll title: </span>{poll.title}</p>\n                    <p><span style={{fontWeight: 'bold'}}>Poll description: </span>{poll.description}</p>\n                    <OpinionForm\n                        poll={poll}\n                        getOpinion={this.props.getOpinion}\n                        showOpinion={this.props.showOpinion}\n                        opinion={this.props.opinion}\n                        toggleModal={this.toggleModal}\n                        deletePoll={this.props.deletePoll}\n                        selectedPoll={this.props.selectedPoll}\n                    />\n\n                    <Modal isOpen={this.state.openForm} toggle={this.toggleModal}>\n                        <ModalHeader toggle={this.toggleModal}>\n                            Update Poll\n                        </ModalHeader>\n                        <ModalBody>\n                            <Form submit={this.props.updatePoll} poll={poll} isUpdate={true} buttonValue='Update poll' toggleModal={this.toggleModal}/>\n                        </ModalBody>\n                    </Modal>\n                </div>\n            );\n        } else if(Object.keys(this.props.data).length === 0){\n            return <h3>No Poll found.Create a new poll</h3>\n        }\n        \n        else {\n            return <h3>Please select a poll from left menu</h3>;\n        }\n    }\n}\n\nMain.propTypes = {\n    selectedPoll: PropTypes.object.isRequired,\n    getOpinion: PropTypes.func.isRequired,\n    showOpinion: PropTypes.func.isRequired,\n    opinion: PropTypes.array.isRequired\n};\n\nexport default Main;\n","const pools = [\n    {\n        id: '1',\n        title: 'What is your favorite programming language',\n        description: 'There are lot of programming language in this world.Among them what is your favorite?',\n        options: [\n            { id: '123', value: 'C', vote: 0 },\n            { id: '124', value: 'C++', vote: 0 },\n            { id: '125', value: 'Javascript', vote: 0 },\n            { id: '126', value: 'Rust', vote: 0 },\n        ],\n        created: new Date(),\n        totalVote: 0,\n        opinions: []\n    },\n    {\n        id: 2,\n        title: 'Which frontend framwork do you prefer',\n        description: 'There are lot of frontend frarework in Javascript.Among them what is your favorite?',\n        options: [\n            { id: '222', value: 'React js', vote: 0 },\n            { id: '333', value: 'Angular js', vote: 0 },\n            { id: '444', value: 'Vue js', vote: 0 },\n            { id: '555', value: 'Svelte', vote: 0 },\n        ],\n        created: new Date(),\n        totalVote: 0,\n        opinions: []\n    },\n    {\n        id: 3,\n        title: 'What is the best way to create android app',\n        description: 'There are lot of ways to crate an android app.So which one you prefer',\n        options: [\n            { id: '44', value: 'Java', vote: 0 },\n            { id: '332', value: 'React native', vote: 0 },\n            { id: '321', value: 'Kotlin', vote: 0 },\n        ],\n        created: new Date(),\n        totalVote: 0,\n        opinions: []\n    },\n\n]\n\nexport default pools;","import { Component } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport Sidebar from './sidebar';\nimport Main from './main';\nimport data from '../data/data';\n\nclass MyPoll extends Component {\n    state = {\n        polls: [],\n        selectedPoll: {},\n        showOpinion: []\n    };\n\n    all = 'all';\n\n    componentDidMount() {\n        this.setState({\n            polls: data,\n            selectedPoll: data[0]\n        });\n    }\n\n    selectPoll = (pollId) => {\n        const selectedPoll = this.state.polls.find(\n            (poll) => poll.id === pollId\n        );\n        this.setState({\n            selectedPoll,\n            showOpinion: [...selectedPoll.opinions]\n        });\n    };\n\n    getOpinion = (opinion) => {\n        const polls = this.state.polls;\n        const poll = polls.find((poll) => poll.id === opinion.pollId);\n        const option = poll.options.find(\n            (opt) => opt.id === opinion.selectedOption\n        );\n        option.vote++;\n        poll.totalVote++;\n        poll.opinions.push(opinion);\n        this.setState({ polls }, () => this.setState({showOpinion: [...this.state.selectedPoll.opinions]}));\n    };\n\n    addNewPoll = (poll) => {\n        this.setState({\n            polls: this.state.polls.concat(poll)\n        });\n    };\n\n    showOpinion = (pollId, optionId) => {\n        if(!optionId){\n            return this.setState({showOpinion: pollId.opinions})\n        }\n        const polls = this.state.polls;\n        let poll = polls.find(poll => poll.id === pollId)\n        let opinion = poll.opinions.filter(opinion => opinion.selectedOption === optionId)\n        this.setState({ showOpinion: opinion });\n    };\n\n    updatePoll = updatedPoll => {\n        const polls = this.state.polls;\n        const poll = polls.find(poll => poll.id === updatedPoll.id)\n        poll.title = updatedPoll.title;\n        poll.description = updatedPoll.description;\n        poll.options = updatedPoll.options;\n        this.setState({ polls})\n    }\n\n    deletePoll = id => {\n        const polls = this.state.polls.filter(poll => poll.id !== id);\n        this.setState({polls, selectedPoll: {}})\n    }\n\n    render() {\n        return (\n            <Container>\n                <h3 className='text-center'>Poll application</h3>\n                <hr />\n                <Row>\n                    <Col md={4}>\n                        <Sidebar\n                            polls={this.state.polls}\n                            selectPoll={this.selectPoll}\n                            addNewPoll={this.addNewPoll}\n                        />\n                    </Col>\n                    <Col md={8}>\n                        <Main\n                            selectedPoll={this.state.selectedPoll}\n                            getOpinion={this.getOpinion}\n                            all={this.all}\n                            showOpinion={this.showOpinion}\n                            opinion={this.state.showOpinion}\n                            updatePoll={this.updatePoll}\n                            deletePoll={this.deletePoll}\n                            data={this.state.polls}\n                        />\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default MyPoll;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Poll from './mypoll'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Poll />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}